AWSTemplateFormatVersion: '2010-09-09'
Description: Creates the web infrastructure for the Spirit of Kiro game client, including a CloudFront distribution with basic authentication, S3 hosting, and WebSocket support. This setup provides secure, global access to the game client with real-time communication capabilities.

Parameters:
  DomainName:
    Type: String
    Description: Domain name for the CloudFront distribution
    Default: nathanpeck.gg
  CertificateArn:
    Type: String
    Description: ARN of the ACM certificate
    Default: arn:aws:acm:us-east-1:784059518401:certificate/94e1f477-2af7-4f9a-a547-5f4ddd59474b
  WebSocketEndpoint:
    Type: String
    Description: The WebSocket server endpoint (e.g., api.example.com:8080)
    Default: localhost:8080

Resources:
  # S3 Bucket for website hosting
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LoggingConfiguration:
        DestinationBucketName: !Ref WebsiteLoggingBucket
        LogFilePrefix: website-access-logs/

  # S3 Bucket for website access logs
  WebsiteLoggingBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # S3 Bucket for CloudFront logging
  CloudFrontLoggingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-cf-logs-${AWS::AccountId}"
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  # CloudFront Origin Access Control
  CloudFrontOAC:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "OAC for ${AWS::StackName}"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        HttpVersion: http3
        Logging:
          Bucket: !Sub "${CloudFrontLoggingBucket.DomainName}"
          Prefix: cf-logs/
          IncludeCookies: false
        Origins:
          - DomainName: !GetAtt WebsiteBucket.RegionalDomainName
            Id: S3Origin
            OriginAccessControlId: !GetAtt CloudFrontOAC.Id
            S3OriginConfig:
              OriginAccessIdentity: ''
          - DomainName: !Select [0, !Split [':', !Ref WebSocketEndpoint]]
            Id: WebSocketOrigin
            CustomOriginConfig:
              HTTPSPort: !Select [1, !Split [':', !Ref WebSocketEndpoint]]
              OriginKeepaliveTimeout: 15
              OriginProtocolPolicy: https-only
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          Compress: true
          LambdaFunctionAssociations:
            - EventType: viewer-request
              LambdaFunctionARN: !GetAtt BasicAuthFunctionVersion.FunctionArn
          MinTTL: 3600
          DefaultTTL: 86400
          MaxTTL: 31536000
        CacheBehaviors:
          - PathPattern: /ws*
            TargetOriginId: WebSocketOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - POST
              - PATCH
              - DELETE
            CachedMethods:
              - GET
              - HEAD
              - OPTIONS
            ForwardedValues:
              QueryString: true
              Headers:
                - Origin
                - Access-Control-Request-Headers
                - Access-Control-Request-Method
                - Sec-WebSocket-Key
                - Sec-WebSocket-Version
                - Sec-WebSocket-Protocol
                - Sec-WebSocket-Accept
                - Sec-WebSocket-Extensions
              Cookies:
                Forward: none
            Compress: true
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
        PriceClass: PriceClass_100
        Aliases:
          - !Ref DomainName
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only

  # Bucket Policy
  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub 'arn:aws:s3:::${WebsiteBucket}/*'
            Condition:
              StringEquals:
                'AWS:SourceArn': !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}'
              Bool:
                aws:SecureTransport: "true"

  # Lambda@Edge function for basic auth
  BasicAuthFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt BasicAuthFunctionRole.Arn
      Code:
        ZipFile: |
          exports.handler = (event, context, callback) => {
            const request = event.Records[0].cf.request;
            const headers = request.headers;
            
            const authString = 'Basic ' + Buffer.from('tester:spooky').toString('base64');
            
            if (typeof headers.authorization === 'undefined' || headers.authorization[0].value !== authString) {
              const response = {
                status: '401',
                statusDescription: 'Unauthorized',
                headers: {
                  'www-authenticate': [{ key: 'WWW-Authenticate', value: 'Basic realm="Secure Area"' }]
                }
              };
              callback(null, response);
            }
            
            callback(null, request);
          };
      Runtime: nodejs20.x
      Timeout: 5

  # Lambda function version
  BasicAuthFunctionVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref BasicAuthFunction
      Description: "Initial version for basic auth"

  # IAM Role for Lambda@Edge
  BasicAuthFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-lambda-execution-policy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-*:*"

  # CloudFront logging bucket policy
  CloudFrontLoggingBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CloudFrontLoggingBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: 
              - s3:PutObject
              - s3:PutObjectAcl
            Resource: !Sub "${CloudFrontLoggingBucket.Arn}/*"
            Condition:
              StringEquals:
                'AWS:SourceArn': !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}'
              Bool:
                aws:SecureTransport: "true"

  WebsiteLoggingBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteLoggingBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action: 
              - s3:PutObject
            Resource: !Sub "${WebsiteLoggingBucket.Arn}/*"
            Condition:
              StringEquals:
                'AWS:SourceAccount': !Ref AWS::AccountId
              Bool:
                aws:SecureTransport: "true"

Outputs:
  DistributionDomainName:
    Description: Domain name of the CloudFront distribution
    Value: !GetAtt CloudFrontDistribution.DomainName
  WebsiteBucketName:
    Description: Name of the S3 bucket hosting the website
    Value: !Ref WebsiteBucket 